#! /usr/bin/env python
# -*- coding: utf-8 -*-

import sys
if sys.getdefaultencoding() == 'ascii':
  reload(sys)
  sys.setdefaultencoding('utf-8')
  delattr(sys, 'setdefaultencoding')

import os
import argparse
import sqlite3
import codecs

from bottle import route, run, template, request, static_file

VIEW_DIR = os.path.join(os.path.dirname(os.path.dirname(__file__)), "view")

@route('/api/tag.json')
def tag_list():
  query = " "
  params = []
  if request.query.prefix:
    query += " where tag like ? "
    params = [request.query.prefix+"%"]
  return {"list": get("select tag, count(*) as count from tag" + query + "group by tag", params)}

@route('/api/tag/<name>.json')
def tag(name):
  return {"list": get("select tag, count(*) as count from tag where tag=? group by tag", [name])}

@route('/api/scenario.json')
def scenario_list():
  query = " "
  params = []
  if request.query.tag:
    query += "A join tag B on A.id=B.scenario_id where B.tag=?"
    params.append(request.query.tag)
  return {"list": get("select * from scenario" + query, params)}

@route('/api/scenario/<id>.json')
def scenario(id):
  return {"list": get("select * from scenario where id=?", [id])}

@route('/api/scenario/<id>/tag.json')
def scenario(id):
  return {"list": get("select tag from tag where scenario_id=?", [id])}

@route('/')
@route('/<name:path>')
def asset(name='/index.html'):
  return static_file(name, root=VIEW_DIR)

def _parse():
  parser = argparse.ArgumentParser()
  parser.add_argument('-p', '--port', action='store', dest='port', default="8080")
  parser.add_argument('--index', action='store', dest='index', default="index.sqlite")
  parser.add_argument('--host', action='store', dest='host', default="localhost")
  return parser.parse_args()

conn = None

def main():
  global conn
  p = _parse()
  open(p.index).close()
  conn = sqlite3.connect(p.index)
  conn.row_factory = sqlite3.Row
  run(host=p.host, port=int(p.port), reloader=True, debug=True)

def get(sql, params=[]):
  c = conn.cursor()
  c.execute(sql, params)
  return map(dict, c)

if __name__ == '__main__':
  main()
