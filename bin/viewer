#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
if sys.getdefaultencoding() == 'ascii':
  reload(sys)
  sys.setdefaultencoding('utf-8')
  delattr(sys, 'setdefaultencoding')

import os
import argparse
import sqlite3

from bottle import route, run, request, static_file

VIEW_DIR = os.path.join(os.path.dirname(os.path.dirname(__file__)), "view")

@route('/api/tag.json')
def tag_list():
  query = ""
  params = []
  if request.query.prefix:
    query += r" where tag like ? ESCAPE '\'"
    params = [_escape(request.query.prefix, '\\') + "%"]
  return {"list": get("select tag, count(*) as total, sum(case when action_count = 0 then 1 else 0 end) as notyet"
                      + " from tag A join scenario B on A.scenario_id = B.id"
                      + query + " group by tag", params)}

@route('/api/tag/<name:path>.json')
def tag(name):
  if request.query.co:
    result = get("select distinct tag from tag where scenario_id in (select scenario_id from tag where tag=?)", [name])
    return {"list": [e for e in result if e['tag'] != name]}
  return {"list": get("""SELECT
    tag,
    COUNT(*) AS total,
    SUM(CASE WHEN action_count = 0 THEN 1 ELSE 0 END) AS notyet
    FROM tag A JOIN scenario B ON A.scenario_id = B.id
    WHERE tag = ? GROUP BY tag""", [name])}

@route('/api/scenario.json')
def scenario_list():
  query = ""
  params = []
  if request.query.tag:
    query += " WHERE `A`.`id` IN (SELECT `scenario_id` FROM `tag` WHERE `tag`=?)"
    params.append(request.query.tag)
  return {"list": get("""select
    MAX(`id`) AS `id` ,
    MAX(body) AS `body`,
    MAX(`doc`) AS `doc`,
    MAX(`action_count`) AS `action_count`,
    MAX(`path`) AS `path`,
    GROUP_CONCAT(`tag`, "\t") AS `tags`
    FROM scenario A JOIN tag B ON A.id=B.scenario_id""" + query + ' GROUP BY `A`.`id`', params)}

@route('/api/scenario/<id>.json')
def scenario(id):
  return {"list": get("select * from scenario where id=?", [id])}

@route('/api/scenario/<id>/tag.json')
def scenario_tag(id):
  return {"list": get("select tag from tag where scenario_id=?", [id])}

@route('/')
@route('/<name:path>')
def asset(name='/index.html'):
  return static_file(name, root=VIEW_DIR)

option = None

def _parse():
  global option
  parser = argparse.ArgumentParser()
  parser.add_argument('-p', '--port', action='store', dest='port', default="8080")
  parser.add_argument('--index', action='store', dest='index', default="index.sqlite")
  parser.add_argument('--host', action='store', dest='host', default="0.0.0.0")
  parser.add_argument('--debug', action='store_true', dest='is_debug', default=False)
  option = parser.parse_args()

def main():
  _parse()
  open(option.index).close()
  run(host=option.host, port=int(option.port), reloader=option.is_debug, debug=option.is_debug)

def get(sql, params=[]):
  conn = sqlite3.connect(option.index)
  conn.row_factory = sqlite3.Row
  c = conn.cursor()
  c.execute(sql, params)
  result = list(map(dict, c))
  c.close()
  conn.close()
  return result

def _escape(q, escape):
  return q.replace('%', escape + '%').replace('_', escape + '_')

if __name__ == '__main__':
  main()
